3.1
a. Easy:
	Depth-first search: fail
	AC3: solves quickly
	backtracking_search, default settings: solves, slowly
	min_conflicts: fail

hard-aima:
	depth_first_graph_search: took too long to finish
	AC3: failed quickly
	backtracking_search: took too long to finish
	backtracking_search with mrv and forward_checking: solved quickly
	min_conflicts: failed slowly

hardest_escargot:
	AC3: failed 
	backtracking_search with mrv and forward_checking: solved quickly
	min_conflicts: 

Sudoku gets harder with increases in the number of different path constraints that need to be considered. The easy puzzle only has the fewest paths and so can easily be solved by AC3 and the default backtracking_search. As the search space gets larger, and the number of paths increases, AC3 fails to find a solution. Backtracking uses a depth_first_graph_search, but also uses inference to select the paths to follow. With minimum remaining values enabled, backtracking_search is able to narrow down the search space and find a solution faster. 

b. With forward_checking, backtracking_search solved the easy puzzle quickly. With mrv enabled, it solves it quickly. With both enabled, three is no noticable increase in speed. 
With harder_aima_csp, it failed quickly.

3.2
a. n = 8
	AC3: failed
	backtracking_search: solved with all backtracking_search settings
	min_conflicts: solved

n = 20 
	AC3: 
	backtracking_search: with default settings: solved with a delay
		with mrv and forward_checking: solved with a smaller delay
	min_conflicts: solved quickly

n = 100
	backtracking_search: works only with both mrv and forward_checking
	min_conflicts: solved

b. Backtracking works best with the minimum remaining values and forward_checking enabled. These settings allow it to 

c. Min-conflicts requires 

